library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.NUMERIC_STD.all;
use IEEE.STD_LOGIC_UNSIGNED.ALL;



entity Calc is
port(

clk:in std_logic;
A:in std_logic_vector(3 downto 0);
B:in std_logic_vector(3 downto 0);
SelectOperacion:in std_logic_vector(2 downto 0);
SelectDisplay: in std_logic;

Signo: out std_logic;
LED_de_operacion: out std_logic_vector(2 downto 0);
Segmentos_del_Display_S8:out std_logic_vector(7 downto 0);
EnableDisplay:out std_logic_vector(3 downto 0));

end Calc;

architecture behavioral of Calc is


component DISPLAY IS
	PORT (
		CLK : IN STD_LOGIC;
		D0 : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
		S8 : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
		EN : OUT STD_LOGIC_VECTOR (3 DOWNTO 0)
	);
END component;

signal Result, TempResult : std_logic_vector (3 downto 0);
signal Signo_tmp: std_logic;
constant SigP: std_logic:='0'   ;
constant SigN: std_logic  :='1' ;

Type state is (State0, State1, State2);
Signal pr_state, nx_state : state;


begin  

 
   process(A,B,SelectOperacion)
 begin
  case(SelectOperacion) is
  when "001" => -- Suma
   TempResult <= A + B ; 
  when "010" => -- Resta
   TempResult <= A - B ;
  	if(A>=B) then  -- Verificacion Negativo
   	Signo_tmp <= SigP ;
   	else
    	Signo_tmp <= SigN ;
	end if; 
  when "100" => -- Multiplication
   TempResult <= std_logic_vector(to_unsigned((to_integer(unsigned(A)) * to_integer(unsigned(B))),4));
  when others => TempResult <= "0000" ; 
  end case;
 end process;
process(clk,SelectDisplay)
begin 
if (clk' event  and clk ='1' and  SelectDisplay = '1') then
	pr_state<=nx_state;
end if;
 end process;


process(Result,pr_state)
begin
 case pr_state is

 when state0 =>
	Result <= A;
	nx_state <=state1;

 when state1 => 
	Result <= B;
	nx_state <=state2;

when state2 => 
	Result <= TempResult;
	nx_state <=state0;
end case;
end process;
	



disp : DISPLAY port map (clk, Result , Segmentos_del_Display_S8, EnableDisplay);
 
 LED_de_operacion <= SelectOperacion;
 Signo <= Signo_tmp;  --Signo 


end behavioral;
